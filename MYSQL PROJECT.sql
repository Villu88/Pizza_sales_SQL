CREATE DATABASE PIZZA

USE PIZZA;

CREATE TABLE ORDERS
(ORDER_ID INT PRIMARY KEY,
ORDER_DATE DATE,
ORDER_TIME TIME NOT NULL);

CREATE TABLE ORDER_DETAILS
(ORDER_DETAILS_ID INT PRIMARY KEY,
ORDER_ID INT NOT NULL,
PIZZA_ID TEXT NOT NULL,
QUANTITY INT);

--- Retrieve the total number of orders placed-------

SELECT COUNT(*) AS TOTAL_ORDERS FROM ORDERS;

-- Calculate the total revenue generated from pizza sales.

SELECT 
    CEILING(SUM(O.QUANTITY * P.PRICE)) AS TOTAL_REVENUE
FROM
    ORDER_DETAILS O
        LEFT JOIN
    PIZZAS P ON O.PIZZA_ID = P.PIZZA_ID;
   
-- Identify the highest-priced pizza.

SELECT 
    P1.NAME
FROM
    PIZZAS P
        LEFT JOIN
    PIZZA_TYPES P1 ON P.PIZZA_TYPE_ID = P1.PIZZA_TYPE_ID
ORDER BY PRICE DESC
LIMIT 1;
    
-- Identify the most common pizza size ordered.

SELECT 
    UPPER(RIGHT(PIZZA_ID,
                LOCATE('_', REVERSE(PIZZA_ID)) - 1)) AS L,
    COUNT(QUANTITY) AS TOTAL_ORDERS
FROM
    ORDER_DETAILS
GROUP BY L
ORDER BY TOTAL_ORDERS DESC;


-- List the top 5 most ordered pizza types along with their quantities.

SELECT 
    P_NAME, SUM(QTY) AS MOST_ORDERED
FROM
    (SELECT 
        P.PIZZA_ID, P1.NAME AS P_NAME, O.QUANTITY AS QTY
    FROM
        PIZZAS P
    LEFT JOIN PIZZA_TYPES P1 ON P.PIZZA_TYPE_ID = P1.PIZZA_TYPE_ID
    LEFT JOIN ORDER_DETAILS O ON P.PIZZA_ID = O.PIZZA_ID) AS NEW
GROUP BY P_NAME
ORDER BY MOST_ORDERED DESC
LIMIT 5;

--- INTERMEDIATE QUESTIONS----

-- Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    P1.CATEGORY, SUM(O.QUANTITY) AS TOTAL_ORDER
FROM
    PIZZAS P
        LEFT JOIN
    PIZZA_TYPES P1 ON P.PIZZA_TYPE_ID = P1.PIZZA_TYPE_ID
        LEFT JOIN
    ORDER_DETAILS O ON P.PIZZA_ID = O.PIZZA_ID
GROUP BY P1.CATEGORY;

-- Determine the distribution of orders by hour of the day--

SELECT HOUR(O.ORDER_TIME) AS H, SUM(TOTAL_ORDER) AS T_ORDER FROM 
ORDERS O LEFT JOIN
(SELECT ORDER_ID , SUM(QUANTITY) AS TOTAL_ORDER FROM ORDER_DETAILS
GROUP BY ORDER_ID) O1
ON O.ORDER_ID = O1.ORDER_ID
GROUP BY H ORDER BY H;

-- Join relevant tables to find the category-wise distribution of pizzas.

SELECT CATEGORY, COUNT(NAME) FROM PIZZA_TYPES
GROUP BY CATEGORY;

-- Group the orders by date and calculate the average number of pizzas ordered per day--


SELECT 
    ROUND(AVG(T),0)
FROM
    (SELECT 
        O.ORDER_DATE, SUM(TOTAL_ORDER) AS T
    FROM
        ORDERS O
    LEFT JOIN (SELECT 
        ORDER_ID, SUM(QUANTITY) AS TOTAL_ORDER
    FROM
        ORDER_DETAILS
    GROUP BY ORDER_ID) O1 ON O.ORDER_ID = O1.ORDER_ID
    GROUP BY ORDER_DATE) AS NEW;
    
-- Determine the top 3 most ordered pizza types based on revenue----

SELECT P1.NAME, ROUND(SUM((P.PRICE*O.QUANTITY)),0) AS TOTAL FROM PIZZAS P LEFT JOIN PIZZA_TYPES P1
ON P.PIZZA_TYPE_ID = P1.PIZZA_TYPE_ID
LEFT JOIN order_details O 
ON P.PIZZA_ID = O.PIZZA_ID
GROUP BY P1.NAME
ORDER BY TOTAL DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.--

SELECT P1.CATEGORY, ROUND((SUM((P.PRICE*O.QUANTITY))/(SELECT 
    CEILING(SUM(O.QUANTITY * P.PRICE))
FROM
    ORDER_DETAILS O
        LEFT JOIN
    PIZZAS P ON O.PIZZA_ID = P.PIZZA_ID)*100),2) AS TOTAL FROM PIZZAS P LEFT JOIN PIZZA_TYPES P1
ON P.PIZZA_TYPE_ID = P1.PIZZA_TYPE_ID
LEFT JOIN order_details O 
ON P.PIZZA_ID = O.PIZZA_ID
GROUP BY P1.CATEGORY
ORDER BY TOTAL DESC;

-- Analyze the cumulative revenue generated over time.

WITH CTE AS
(SELECT O1.ORDER_ID,O1.ORDER_DATE, O2.SALE FROM ORDERS O1 LEFT JOIN
(SELECT O.ORDER_ID, SUM((O.QUANTITY*P.PRICE)) AS SALE FROM ORDER_DETAILS O LEFT JOIN PIZZAS P
ON O.PIZZA_ID = P.PIZZA_ID
GROUP BY O.ORDER_ID) O2
ON O1.ORDER_ID = O2.ORDER_ID)

SELECT DISTINCT ORDER_DATE , CEILING(SUM(SALE) OVER(ORDER BY ORDER_DATE)) AS CUM_SUM FROM CTE;












